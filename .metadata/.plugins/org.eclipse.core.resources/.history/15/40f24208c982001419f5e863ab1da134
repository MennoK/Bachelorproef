import java.util.Random;

import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.core.Instances;

public class Classify {
	
	/**
	 * Maak een model met een gegeven methode voor de trainingset en voer cross-validatie uit.
	 * En maak een bestand met samenvatting: Resultaten/Crossvalidatie/[trainingset]/[methode].[folds]folds.txt
	 * en een bestnand met alleen de confusion matrix: Resultaten/Crossvalidatie/[trainingset]/[methode].[folds]folds.confusionmatrix.txt
	 * 
	 * @param 	method
	 * 			De methode die moet gebruikt worden
	 * @param 	trainingSet
	 * 			De training-set gebruikt voor het model EN voor de cross-validatie.
	 * @param 	folds
	 * 			Het aantal folds voor cross-validatie
	 * @return	De accuracy van het model. Of -1 als er een fout opgetreden is.
	 */
	public double classify_crossvalidation(Method method, DataSet trainingSet, int folds) {
		// haal de instances op
		Instances training = trainingSet.instances;
		// train classifier
		Classifier cls = method.classifier;
		try {
			cls.buildClassifier(training);
			Evaluation eval = new Evaluation(training);
			eval.crossValidateModel(cls, training, folds, new Random(1));
			// haal de resultaten van de evaluatie op
			double accuracy = eval.pctCorrect();
			String confusionMatrix = eval.toMatrixString();
			String summary = eval.toSummaryString();
			Files.writeFile("Resultaten/Crossvalidatie/"+trainingSet.name+"/"+method.getName()+"."+folds+"folds.txt", summary);
			return accuracy;
			
		} catch (Exception e) {
			return -1;
		}
	}
	
}
