import org.apache.commons.lang3.StringUtils;

import weka.classifiers.Classifier;

/**
 * Alle methodes met verschillende opties opgesomd in een 'enum'
 */
public enum Method {
	
	/**
	 * Default = pruned met confidence factor 0.25, min. 2 obj. per blad
	 */
	J48_1("-C 0.25 -M 2"),
	
	/**
	 * Hogere confidence factor: 0.5 (http://ww.samdrazin.com/classes/een548/project2report.pdf, figuur 4), min. 2 obj. per blad
	 */
	J48_2("-C 0.5 -M 2"),
	
	/** 
	 * ...
	 */
	J48_3(""),
	/**
	 * unpruned, min. 2 obj. per blad
	 */
	J48_4("-U -M 2");

	Method(String options) {
		String[] optionsArray = null;
		try {
			optionsArray = weka.core.Utils.splitOptions(options);
		} catch (Exception e) {
			System.out.println("Probleem met het parsen van de opties");
			optionsArray = null;
		}
		this.options = optionsArray;
	}
	
	public final String[] options;
	
	/**
	 * Geef de naam van de methode terug.
	 * Voorbeeld: J48_2.getName() = "J48"
	 */
	public String getName() {
		String name = this.name();
		return StringUtils.substringBefore(name, "_");
	}
	
	/**
	 * Maak een Classifier object aan voor de methode (weka.classifiers.Classifier).
	 * Stel ook de opties in.
	 */
	public Classifier getClassifier() {
		Object classifier = null;
		try {
			classifier = Class.forName(this.getName()).newInstance();
		} catch (InstantiationException | IllegalAccessException
				| ClassNotFoundException e) {
			System.out.println("Fout met het maken van de classifier van "+this.name());
		}
		if (classifier == null)
			System.out.println("Fout met het maken van de classifier van "+this.name());
		else {
			// stel de opties in
			((Classifier) classifier).setOptions(this.options);
		}
		return (Classifier) classifier;
	}
	
}
